{"version":3,"sources":["index.js"],"names":["config","require","BACKEND_URL","FEED_LABEL","APP_TITLE","COMMENT_LABEL","COMMENT_BUTTON_LABEL","COMMENT_UNAVAILABLE_LABEL","FEED_UNAVAILABLE_LABEL","Feature","title","desc","id","rest","useState","setError","comments","setComments","fetchComments","fetch","method","then","res","json","result","error","useEffect","p","shadow","borderWidth","fontSize","mt","mb","allowMultiple","_expanded","bg","color","flex","textAlign","length","spacing","align","map","comment","w","content","style","width","onSubmit","e","preventDefault","data","FormData","target","headers","body","JSON","stringify","get","status","type","name","aria-describedby","variantColor","variant","NewEventDrawer","props","useDisclosure","isOpen","onOpen","onClose","toast","useToast","btnRef","React","useRef","ref","onClick","placement","finalFocusRef","callBack","description","duration","isClosable","placeholder","mr","App","events","setEvents","setReload","justify","as","size","pl","pr","pt","event","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.700216f9.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ThemeProvider, CSSReset, Box, Heading, Text, Input, Button } from \"@chakra-ui/core\";\nimport { useDisclosure } from \"@chakra-ui/core\";\nimport { Stack } from \"@chakra-ui/core\";\nimport { Flex } from \"@chakra-ui/core\";\nimport { Textarea } from \"@chakra-ui/core\";\nimport { useToast } from \"@chakra-ui/core\";\nimport {\n  Accordion,\n  AccordionItem,\n  AccordionHeader,\n  AccordionPanel,\n  AccordionIcon,\n} from \"@chakra-ui/core\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n} from \"@chakra-ui/core\";\nimport { FormControl } from \"@chakra-ui/core\";\n\nconst config = require('./appConfig.json');\n\nconst BACKEND_URL = config.BACKEND_URL;\nconst FEED_LABEL = config.FEED_LABEL;\nconst APP_TITLE = config.APP_TITLE;\nconst COMMENT_LABEL = config.COMMENT_LABEL;\nconst COMMENT_BUTTON_LABEL = config.COMMENT_BUTTON_LABEL;\nconst COMMENT_UNAVAILABLE_LABEL = config.COMMENT_UNAVAILABLE_LABEL;\nconst FEED_UNAVAILABLE_LABEL = config.FEED_UNAVAILABLE_LABEL;\n\nfunction Feature({ title, desc, id, ...rest }) {\n  const [error, setError] = useState(null);\n  const [comments, setComments] = useState(null);\n\n  useEffect(() => fetchComments(), [])\n\n  function fetchComments() {\n    fetch(BACKEND_URL + '/comments?event_id=' + id, {\n      method: 'GET',\n    })\n    .then(res => res.json())\n    .then(\n      (result) => {\n        setComments(result);\n      },\n      (error) => {\n        setError(error);\n      }\n    )\n  }\n\n  function postComment(e) {\n    e.preventDefault();\n    const data = new FormData(e.target);\n    fetch(BACKEND_URL + '/comments', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ 'commenter': 'supratik_das', 'content': data.get('content'), 'event_id': id })\n    })\n    .then(res => res.json())\n    .then(data => {\n      if (data.status == \"success\") {\n        fetchComments();\n      }\n    })\n  }\n\n  return (\n    <Box p={5} shadow=\"md\" borderWidth=\"1px\" {...rest}>\n      <Heading fontSize=\"xl\">{title}</Heading>\n      <Text mt={4} mb={4}>{desc}</Text>\n      <Accordion allowMultiple>\n        <AccordionItem>\n          <AccordionHeader _expanded={{ bg: \"#1A365D\", color: \"white\" }}>\n            <Box flex=\"1\" textAlign=\"left\">\n              {COMMENT_LABEL} ({comments === null ? 0 : comments.length})\n            </Box>\n            <AccordionIcon />\n          </AccordionHeader>\n          <AccordionPanel>\n            <Stack spacing={3} align=\"center\">\n              { comments === null ? (<Text>{COMMENT_UNAVAILABLE_LABEL}</Text>) : comments.map(comment => (\n                <Box p={2} w=\"100%\" borderWidth=\"1px\">\n                  <Text>{comment.content}</Text>\n                </Box>\n              ))}\n            </Stack>\n            <form style={{width : '100%'}} onSubmit={postComment}>\n              <FormControl mt={5}>\n                <Input type=\"text\" id=\"content\" name=\"content\" aria-describedby=\"text-helper-text\" />\n                <Button variantColor=\"teal\" variant=\"solid\" type=\"submit\" mt={2}>  \n                  {COMMENT_BUTTON_LABEL}\n                </Button>\n              </FormControl>\n            </form>\n          </AccordionPanel>\n        </AccordionItem>\n      </Accordion>\n    </Box>\n  );\n}\n\nfunction NewEventDrawer(props) {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const toast = useToast();\n  const btnRef = React.useRef();\n\n  function postEvent(e) {\n    e.preventDefault();\n    const data = new FormData(e.target);\n    fetch(BACKEND_URL + '/events', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ 'name': data.get('name'), 'description': data.get('description') })\n    })\n    .then(res => res.json())\n    .then(data => {\n      if (data.status === \"success\") {\n        props.callBack(true);\n        toast({\n          title: \"Event created.\",\n          description: \"\",\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        })\n      } else {\n        toast({\n          title: \"Event creation failed\",\n          description: \"\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        })\n      }\n    })\n  }\n\n  return (\n    <>\n      <Button ref={btnRef} variantColor=\"teal\" onClick={onOpen}>\n        Create an {FEED_LABEL}\n      </Button>\n      <Drawer\n        isOpen={isOpen}\n        placement=\"top\"\n        onClose={onClose}\n        finalFocusRef={btnRef}\n      >\n        <DrawerOverlay />\n        <DrawerContent>\n          <form style={{width : '100%'}} onSubmit={postEvent}>\n            <DrawerCloseButton />\n            <DrawerHeader>Create an {FEED_LABEL}</DrawerHeader>\n\n            <DrawerBody>\n              <Input name=\"name\" placeholder=\"Event Name...\" />\n              <Textarea name=\"description\" mt={5} placeholder=\"Event Description...\" />\n            </DrawerBody>\n\n            <DrawerFooter>\n              <Button variant=\"outline\" mr={3} onClick={onClose}>\n                Cancel\n              </Button>\n              <Button type=\"submit\" color=\"blue\">Save</Button>\n            </DrawerFooter>\n          </form>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nfunction App() {\n  const [error, setError] = useState(null);\n  const [events, setEvents] = useState(null);\n  const [reload, setReload] = useState(false);\n\n  useEffect(() => \n    fetch(BACKEND_URL + '/events', {\n      method: 'GET',\n    })\n    .then(res => res.json())\n    .then(\n      (result) => {\n        setEvents(result);\n      },\n      (error) => {\n        setError(error);\n      }\n  ), [])\n\n  return (\n    <ThemeProvider>\n      <CSSReset />\n      <Box bg=\"#1A365D\" w=\"100%\" p={4} color=\"white\">\n        <Flex align=\"center\" justify=\"space-between\">\n          <Heading as=\"h2\" size=\"xl\">\n            {APP_TITLE}\n          </Heading>\n          <NewEventDrawer callBack={setReload}></NewEventDrawer>\n        </Flex>\n      </Box>\n      <Stack pl={20} pr={20} pt={10} spacing={8}>\n        { events === null ? (<Text>Loading</Text>) : events.map(event => (\n            <Feature\n            title={event.name}\n            desc={event.description}\n            id={event.id}\n          />\n          ))\n         }\n    </Stack>\n    </ThemeProvider>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);"],"sourceRoot":""}